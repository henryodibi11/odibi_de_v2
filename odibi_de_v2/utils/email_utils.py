"""
email_utils.py

This module provides utilities for formatting ingestion pipeline email notifications
with rich HTML content, including success and failure summaries, metadata, and log breakdowns.
"""

from datetime import datetime
from typing import List


def build_ingestion_email_html(logs: List[str]) -> str:
    """Builds a styled HTML email body for ingestion success or failure.

    This function parses the logs to determine project and table metadata,
    identifies whether the job failed or succeeded, redacts sensitive values,
    and formats logs into expandable HTML blocks grouped by severity (ERROR, WARNING, INFO).

    Redaction is applied automatically to any key=value or key='value' patterns found
    inside logs associated with `__init__` calls, based on the assumption that these
    lines often include secrets.

    Args:
        logs (List[str]): List of log lines generated by the ingestion job.

    Returns:
        str: A complete HTML string suitable for sending as an email body.

    Example:
        >>> from utils.email_utils import build_ingestion_email_html
        >>> html_body = build_ingestion_email_html(logs)
        >>> send_email(subject="Ingestion Status", html=html_body)
    """
    def extract_between(text, start, end):
        try:
            return text.split(start, 1)[1].split(end, 1)[0].strip()
        except Exception:
            return None

    def extract_timestamp(line: str) -> str:
        try:
            return line.split(" - ")[2].strip().split(" ")[0]
        except Exception:
            return datetime.utcnow().isoformat()

    def redact_secrets_from_line(line: str) -> str:
        if "__init__" not in line:
            return line
        import re
        return re.sub(r"(\b\w+)\s*=\s*(['\"]?).+?\2", r"\1=[REDACTED]", line)

    # Extract metadata and status
    metadata_line = next((l for l in logs if "WORKFLOW.BRONZE.run_bronze_ingestion" in l), "")
    project = extract_between(metadata_line, "project=", " -") or "DefaultProject"
    table = extract_between(metadata_line, "table=", " ") or "DefaultTable"

    error_line = next((l for l in logs if "ERROR TYPE: Runtime_Error" in l), "")
    is_failure = bool(error_line)

    error_type = extract_between(error_line, "ERROR TYPE:", " -") or "None"
    summary = (
        error_line.split("ERROR TYPE: Runtime_Error -")[-1].strip()
        if is_failure
        else f"Ingestion completed successfully at {datetime.utcnow().isoformat()}"
    )
    timestamp = extract_timestamp(error_line or metadata_line)

    # Group logs
    grouped = {"ERROR": [], "WARNING": [], "INFO": []}
    for line in logs:
        redacted = redact_secrets_from_line(line)
        if "ERROR" in line:
            grouped["ERROR"].append(redacted)
        elif "WARNING" in line:
            grouped["WARNING"].append(redacted)
        else:
            grouped["INFO"].append(redacted)

    def html_block(title, lines):
        if not lines:
            return ""
        html_lines = "<br>".join(line.replace(" ", "&nbsp;") for line in lines)
        return f"<details><summary><b>{title}</b> ({len(lines)} lines)</summary><pre>{html_lines}</pre></details>"

    return f"""
    <html>
    <body style="font-family:Arial, sans-serif; color:#f5f5f5; background-color:#1e1e1e; padding:20px;">
        <h2 style="color:{'#c0392b' if is_failure else '#2ecc71'};">
            {'Ingestion Failure' if is_failure else 'Ingestion Success'}
        </h2>
        <p><b style="color:#ecf0f1;">Project:</b> <span style="color:#bdc3c7;">{project}</span></p>
        <p><b style="color:#ecf0f1;">Table:</b> <span style="color:#bdc3c7;">{table}</span></p>
        <p><b style="color:#ecf0f1;">Time:</b> <span style="color:#bdc3c7;">{timestamp}</span></p>
        <p><b style="color:#ecf0f1;">{'Error' if is_failure else 'Status'}:</b> <span style="color:#bdc3c7;">{error_type if is_failure else 'Success'}</span></p>
        <p><b style="color:#ecf0f1;">Summary:</b> <span style="color:#bdc3c7;">{summary}</span></p>
        <hr style="margin:20px 0; border:1px solid #444;">
        {html_block("1. Errors", grouped["ERROR"]) if is_failure else ""}
        {html_block("2. Warnings", grouped["WARNING"])}
        {html_block("3. Info Logs", grouped["INFO"])}
    </body>
    </html>
    """
